# Algorithm 1

# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

sum_one = 0
sum_two = 0
for i in range(0,1000):
    if i % 3 == 0:
        sum_one += i
    elif i % 5 == 0:
        sum_two += i
print sum_one
print sum_two

sum_three = sum_one + sum_two

print sum_three





# --------------------
# --------------------


# Algorithm 2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


fib_list = [1,1]
f = 1
even_list = []
while f <= 4000000:
    f = fib_list[-1] + fib_list[-2]
    fib_list.append(f)
del(fib_list[-1])
# print fib_list      #All fib numbers below 4mil (33 in total)

for i in fib_list:
    if i % 2 == 0:
        even_list.append(i)
print sum(even_list)


# --------------------
# --------------------

# Algorithm 3

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def prime_finder(n):
    # n = 600851475143
    i = 2
    while i*i < n:
        while n % i == 0:
            n = n / i
        i += 1
    print n
prime_finder(600851475143)

# Second solution:

def the_sieve():
    prime_list = [2,3]
    for i in range(4,1000000):
        for j in prime_list:
            if i % j == 0:
                # this number is divisible by known prime.
                # it CANNOT be prime
                not_prime = True
            # we know this number isnt divisible by any known prime
            prime_list.append(i)